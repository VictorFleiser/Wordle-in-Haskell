--  Jeu Wordle en Haskell (version 2)

import System.Random
import Data.List
import Data.Char


wordlistFile :: String
answerlistFile :: String

-- Mots en anglais
-- wordlist_en.txt contient les 12947 mots de 5 lettres (de la langue anglaise) accept√©s par Wordle
-- answerlist.txt contient les 2309 mots de 5 lettres (de la langue anglaise) qui sont des r√©ponses potentielles dans Wordle (il s'agit d'un sous-ensemble de wordlist.txt qui exclut les mots trop obscurs, les pluriels, etc.)
-- wordlist_en.txt et answerlist_en.txt sont tous deux tir√©s de https://dagshub.com/arjvik/wordle-wordlist
-- Veuillez d√©commenter les deux lignes ci-dessous pour avoir les mots en anglais

-- wordlistFile = "wordlist_en.txt"
-- answerlistFile = "answerlist_en.txt"
    
-- Mots en fran√ßais
-- wordlist_fr.txt contient 6812 mots de 5 lettres (de la langue fran√ßaise)
-- answerlist_fr.txt contient 4452 mots de 5 lettres (de la langue anglaise) qui sont des r√©ponses potentielles dans Wordle (il s'agit d'un sous-ensemble de mots_fr_accents.txt qui exclut les mots avec accents)
-- wordlist_fr.txt et answerlist_fr.txt sont tir√©s d'une liste des mots de la langue fran√ßaise (https://git.esiee.fr/demphita/tous-les-mots) auquel nous avons conserv√© les mots de 5 lettres
-- Veuillez commenter les deux lignes ci-dessous pour avoir les mots en anglais

wordlistFile = "wordlist_fr.txt"
answerlistFile = "answerlist_fr.txt"
    

-- Nombre de r√©ponses possibles
maxGuesses :: Int
maxGuesses = 6

-- Affiche l'introduction au jeu
print_intro :: IO ()
print_intro = do
  putStrLn "\n"
  putStrLn ("Vous disposez de " ++ show maxGuesses ++ " tentatives pour deviner le mot.")
  putStrLn "Le mot est un mot de 5 lettres, choisi dans une liste de mots fran√ßais."
  putStrLn "Saisissez une r√©ponse apr√®s chaque question."
  putStrLn "Bonne chance !"

-- Charge une liste de mots √† partir d'un fichier
load_wordlist :: String -> IO [String]
load_wordlist filename = do
  contents <- readFile filename --  lit le contenu du fichier sp√©cifi√© par 'filename' et renvoie son contenu sous forme de cha√Æne de caract√®res
  return (lines contents) -- divise la cha√Æne de caract√®res 'contents' en une liste de cha√Ænes de caract√®res √† chaque retour √† la ligne

-- S√©lectionne de mani√®re al√©atoire un mot √† partir d'une liste de mots
pick_solution :: [String] -> IO String
pick_solution wordlist = do
  index <- randomRIO (0, length wordlist - 1) -- g√©n√®re un nombre al√©atoire dans l'intervalle sp√©cifi√© ('<-' est utilis√© pour extraire ce nombre de l'action I/O et le lier √† la variable 'index')
  return (wordlist !! index) --  renvoie le mot correspondant √† l'indice al√©atoire ('!!' est utilis√© pour acc√©der √† l'√©l√©ment √† un indice sp√©cifique dans une liste)

-- Type de donn√©es qui repr√©sente l'√©tat du jeu
data GameState = GameState
  { guesses :: [String] -- liste de cha√Ænes de caract√®res qui contient les tentatives faites par le joueur
  , numGuesses :: Int -- nombre total de tentatives effectu√©es par le joueur
  , answer :: String --  le mot √† deviner dans le jeu
  , wordlist :: [String] -- la liste de mots √† partir de laquelle le mot √† deviner est s√©lectionn√©
  }

-- Cr√©e et renvoie l'√©tat initial du jeu.
initialState :: [String] -> String -> GameState
initialState wordlist answer = GameState
  { guesses = [] -- initialise le champ 'guesses' de l'√©tat du jeu comme une liste vide (aucune tentative n'a √©t√© faite initialement)
  , numGuesses = 0 -- initialise le champ 'numGuesses' √† z√©ro (aucune tentative effectu√©e)
  , answer = answer -- initialise le champ 'answer' de l'√©tat du jeu avec le mot √† deviner fourni en entr√©e
  , wordlist = wordlist -- initialise le champ 'wordlist' avec la liste de mots fournie en entr√©e
  }

-- Prend une cha√Æne de caract√®res en entr√©e et la convertit en majuscules (pour un meilleur rendu dans le terminal)
toUpper :: String -> String
toUpper = map (\c -> if c >= 'a' && c <= 'z' then toEnum (fromEnum c - 32) else c)

-- Prend une cha√Æne de caract√®res en entr√©e et la convertit en minuscules (pour simplifier les tests de validit√© des tentatives)
toLower :: String -> String
toLower = map (\c -> if c >= 'A' && c <= 'Z' then toEnum (fromEnum c + 32) else c)

-- V√©rifie la pr√©sence d'accents dans une cha√Æne de caract√®res
containsAccents :: String -> Bool
containsAccents = any isAccent

-- V√©rifie si un caract√®re poss√®de un accent
isAccent :: Char -> Bool
isAccent c = c `elem` "√†√°√¢√£√§√®√©√™√´√¨√≠√Æ√Ø√≤√≥√¥√µ√∂√π√∫√ª√º√ß√Ä√Å√Ç√É√Ñ√à√â√ä√ã√å√ç√é√è√í√ì√î√ï√ñ√ô√ö√õ√ú√á"

-- Renvoie le feedback pour un caract√®re unique lors d'une tentative
returnFeedbackChar :: String -> String -> Char -> Int -> Char
returnFeedbackChar answer guess guessChar guessIndex
  | answer !! guessIndex == guessChar = 'üü©' -- si le caract√®re de la r√©ponse √† l'indice 'guessIndex' correspond au caract√®re de la tentative 'guessChar', alors le caract√®re est correctement plac√© 
  | elem guessChar answer = 'üü®' --  si le caract√®re de la tentative 'guessChar' est pr√©sent dans la r√©ponse, mais pas √† la bonne position, alors cela signifie qu'il est pr√©sent mais mal plac√© 
  | otherwise = '‚¨ú' -- si aucune des conditions pr√©c√©dentes n'est remplie, cela signifie que le caract√®re de la tentative n'est pas pr√©sent dans la r√©ponse

-- Renvoie le feedback pour une tentative compl√®te (une cha√Æne de caract√®res) sous forme d'une liste de couleurs repr√©sentant le feedback pour chaque caract√®re dans la tentative
returnFeedbackWord :: String -> String -> String
returnFeedbackWord answer guess = zipWith (returnFeedbackChar answer guess) guess [0..] -- utilise la fonction 'zipWith' pour appliquer la fonction 'returnFeedbackChar' √† chaque caract√®re de la tentative ('guess') et son indice correspondant, par rapport √† la r√©ponse ('answer')

-- Renvoie une tentative avec son feedback concat√©n√©
returnGuess :: String -> String -> String
returnGuess answer guess = returnFeedbackWord answer guess ++ " : " ++ Main.toUpper guess -- combine le feedback de la tentative avec la tentative elle-m√™me, et renvoie le r√©sultat

-- Renvoie toutes les tentatives avec leurs feedbacks concat√©n√©s
returnGuesses :: [String] -> String -> String
returnGuesses guesses answer = 
  let guessesString = intercalate "\n" (map (returnGuess answer) guesses) -- applique la fonction 'returnGuess' √† chaque tentative de la liste 'guesses', g√©n√©rant ainsi une liste de cha√Ænes de caract√®res contenant chaque tentative avec son feedback
      remainingGuesses = intercalate "\n" (replicate (maxGuesses - length guesses) (replicate 5 '‚¨õ')) --  g√©n√®re une cha√Æne de caract√®res repr√©sentant les tentatives restantes sous forme de blocs vides
  in if null guesses then remainingGuesses else guessesString ++ "\n" ++ remainingGuesses -- v√©rifie si la liste des tentatives est vide. Si c'est le cas, cela signifie qu'aucune tentative n'a √©t√© faite, donc la fonction renvoie uniquement les tentatives restantes

-- D√©finit un nouveau type de donn√©es, avec deux constructeurs de donn√©es : Error et Good
data Result = Error String | Good ()

-- V√©rifie si une tentative est valide dans le contexte d'un √©tat de jeu donn√©
checkGuess :: GameState -> String -> Result
checkGuess state guess
  | length guess /= 5 = Error "Le mot doit avoir une longueur de 5 caract√®res." -- v√©rifie si la tentative n'est pas exactement de 5 caract√®res
  | any isAccent guess = Error "Le mot ne peut pas contenir d'accents." -- v√©rifie si la tentative contient des accents
  | not (all (`elem` (['a'..'z'] ++ ['A'..'Z'])) guess) = Error "Le mot doit contenir seulement des lettres." -- v√©rifie si la tentative contient des caract√®res autres que des lettres
  | not (elem guess (wordlist state)) = Error "Le mot doit √™tre pr√©sent dans la liste des mots accept√©s." -- v√©rifie si la tentative n'est pas pr√©sente dans la liste des mots accept√©s de l'√©tat de jeu
  | elem guess (guesses state) = Error "Le mot ne doit pas d√©j√† avoir √©t√© sugg√©r√©." -- v√©rifie si la tentative est d√©j√† pr√©sente dans la liste des tentatives pr√©c√©dentes
  | otherwise = Good () -- sinon, la tentative est valide

-- Boucle principale du jeu
gameLoop :: GameState -> IO ()
gameLoop state = do
  putStrLn "\n"
  putStrLn ( "=========================" )
  putStrLn ( returnGuesses (reverse (guesses state)) (answer state) ) -- affiche toutes les tentatives effectu√©es jusqu'√† pr√©sent avec leurs feedbacks
  putStrLn ( "Tentatives restantes : " ++ show (maxGuesses - numGuesses state) ++ "/" ++ show maxGuesses ) -- affiche le nombre de tentatives restantes sur le nombre total autoris√©
  case () of -- v√©rifie diverses conditions de fin de jeu
    _ | not (null (guesses state)) && head (guesses state) == answer state -> do -- si une tentative a √©t√© faite et que la premi√®re tentative est √©gale √† la r√©ponse, alors le joueur a gagn√©
      putStrLn "\n"
      putStrLn "\tVOUS AVEZ GAGN√â !"
      putStrLn "\n"
      putStrLn ( "Le mot √† trouver √©tait : " ++ Main.toUpper (answer state) ) -- si le nombre de tentatives effectu√©es atteint ou d√©passe le nombre maximal autoris√© 
      putStrLn ( "=========================" )
    _ | numGuesses state >= maxGuesses -> do
      putStrLn "\n"
      putStrLn "\tVOUS AVEZ PERDU !"
      putStrLn "\n"
      putStrLn ( "Le mot √† trouver √©tait : " ++ Main.toUpper (answer state) )
      putStrLn ( "=========================" )
    _ -> do -- sinon, le jeu continue. Le joueur est invit√© √† effectuer une nouvelle tentative
      putStrLn "Faites une proposition : "
      guess <- getLine
      let guessLower = Main.toLower guess
      putStrLn ( "=========================" )
      case checkGuess state guessLower of -- v√©rifie si la tentative est valide en utilisant la fonction 'checkGuess'
        Error err -> do -- si la tentative est invalide, un message d'erreur est affich√©, indiquant la raison de l'invalidit√©
          putStrLn "\n"
          putStrLn "Tentative erron√©e :"
          putStrLn err
          gameLoop state
        Good () -> do -- si la tentative est valide, une nouvelle configuration de l'√©tat du jeu est cr√©√©e avec la tentative ajout√©e √† la liste des tentatives et le nombre de tentatives mis √† jour
          let state' = state { guesses = guessLower : guesses state, numGuesses = numGuesses state + 1 }
          gameLoop state'

-- Fonction main : entr√©e principale du programme
main :: IO ()
main = do
  print_intro -- affiche le message d'introduction
  wordlist <- load_wordlist wordlistFile -- charge une liste de mots √† partir d'un fichier
  answerlist <- load_wordlist answerlistFile -- charge une liste de r√©ponses possibles √† partir d'un fichier
  answer <- pick_solution answerlist -- choisit un mot al√©atoire dans la liste
  let state = initialState wordlist answer -- initialise l'√©tat du jeu

  -- Affiche la solution (utilis√© pour le d√©bogage)
  -- putStrLn ( "DEBUG : Solution: " ++ Main.toUpper answer)

  gameLoop state -- d√©marrer la boucle du jeu
